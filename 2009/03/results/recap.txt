First up we have Lance, who wrote his solution in Perl.  He went with bit vectors to represent the numbers:

{code}@charMap = (0x77, 0x12, 0x5D, 0x5B, 0x3A, 0x6B, 0x6F, 0x52, 0x7F, 0x7A, 0x7E, 0x2F, 0x65, 0x1F, 0x6D, 0x6C);
{code}And this cute bit for deciding what to print.  2*\* (6 \-$segment) indeed\!

{code}sub shouldPrintCharacter {
    my($charToPrint, $segment,$character, $mask);
    $charToPrint = shift;
    $charToPrint = hex($charToPrint);
    $segment = shift;
    $character = $charMap[$charToPrint];
    $mask = 2 ** (6-$segment);
    if($character & $mask) {
    return 1;
    } else {
    return 0;
    }
}
{code}
----
Next up is Chi, who proves both that that SQL isn't only for querying relational data while simultaneously proving that maybe it should be.

{code}with params as
(
select
'&input' p,
&size sze
from dual
),
szedrows as
(
select '\|' a
from params
connect by level <= params.sze
),
out as
(
select
1 n,
replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(
params.p,
'0', ' ' || lpad('-', params.sze, '-') || '  '),
'1', ' ' || lpad(' ', params.sze, ' ') || '  '),
'2', ' ' || lpad('-', params.sze, '-') || '  '),
'3', ' ' || lpad('-', params.sze, '-') || '  '),
'4', ' ' || lpad(' ', params.sze, ' ') || '  '),
'5', ' ' || lpad('-', params.sze, '-') || '  '),
'6', ' ' || lpad('-', params.sze, '-') || '  '),
'7', ' ' || lpad('-', params.sze, '-') || '  '),
'8', ' ' || lpad('-', params.sze, '-') || '  '),
'9', ' ' || lpad('-', params.sze, '-') || '  ') txt
from params
union all
{code}Followed by unions for each row.  Gotta love the use of replace 10 times\!

----
Sheldon decided he doesn't like me and submitted another Perl solution.  I can actually display the entire program here, because I don't get it.  And no folks, Sheldon did not use an obfuscator, he's a professional who's been doing this for years.  Don't try this at home.  Please.&nbsp; Note that this is a one liner that I only broke up so you don't have to scroll.


{code}($n,$h)=@ARGV;$h=$h?$h:2;$w=$h+2;$a=" "x($w-1)."| ";$b=" ".("@"x($w-2))."  ";$c="@".(" "x($w-2))."@ ";$d="@".(" " x ($w));$e=" "x$w." ";
@r=([qw'[02356789]$b [14]$e @/-'],[qw'--[1237]--$a- -[0489]--$c- -[56]--$d @/|'], [qw'--[017]--$e- -[2345896]--$b @- 0$c @/|'],
[qw'[134579]$a 2$d [068]$c @/|'],[qw'[174]$e [0236589]$b @/-']);for$i(0..4){$z=($i==1||$i==3)?$h:1;
for$](1..$z){$_=$n;for$0(@{$r_[$i]_})_{eval"s/$0/g"}print"$\n"}}
{code}
----
Nathan showed that LOGO and turtle graphics aren't just for kids (or that that is exactly what they're for, we're not sure).

He uses the fact that Logo is essentially a weak Lisp to setup this loop

{code}Repeat Count :numbers [
    DrawNumber :x :y :size Item :i :numbers
    Make "x :x + :segment + :size * (:segment + :gap)
    Make "i :i + 1
]
{code}DrawNumber basically has the turtle walk around the seven segments, dropping lines when necessary like so:

{code}If Member? :num [1 3 4 5 6 7 8 9 0] [
    VerticalLine :x + :gap + (:segment + :gap) * :size :y - :gap - (:segment + :gap) * :size :size
]
{code}It ends up something like this:
!sample.jpg|width=818,height=572!

This also has the example of being the shortest readable solution at only 61 lines.

----
Ron went with a javascript solution that uses the javascript yield in a nice way.  First, we see the digit generation method:

{code:javascript}function _digitGen(num) {
    if (num.charAt(0) == '-') { num = num.substring(1); }

    var digits = [];
    while (num.length > 0) {
        digits.push(num.substr(0, 1));
        num = num.substring(1);
    }

    for (let i = 0; i < digits.length; ++i) { yield digits[i]; }
    yield undefined;
}
{code}And then the rendering code.

{code:javascript}    for (i = _digitGen(num); ((d = i.next()) != undefined); digits.push(_renderDigit(d, sz)));
{code}Can't do that in Java\!  Ron also has an alternate "Hollywood Style" rendering which does a "password cracking" animation ala bad movies.  Should be seen to be believed.

[Check it out here.|^ron_thomas_200903.html]


----
Dave went Object Oriented all the way with a class for each number.  here's Six.  Bonus marks for being able to type super(size).

{code:java}public class Six  extends Number{
    public Six(int size){
        super(size);
    }
    public String getRow(int row) throws Exception{
        switch(row){
        case 0:
            return createRow(BLANK, DASH);
        case 1:
            return createRow(LEFT, SPACE);
        case 2:
            return createRow(BLANK, DASH);
        case 3:
            return createRow(BOTH, SPACE);
        case 4:
            return createRow(BLANK, DASH);
        }
        throw new Exception("Input on crack");
    }

}
{code}He then creates a list of number objects and renders 'em.  Not bad for our Product Manager\!
----
Darko arranged the lookup data a little differently:

{code:java}    private static final char[][] DIGITS = {
      "||- -||".toCharArray(),
      "     ||".toCharArray(),
      "| --- |".toCharArray(),
      "  ---||".toCharArray(),
      " | - ||".toCharArray(),
      " |---| ".toCharArray(),
      "||---| ".toCharArray(),
      "    -||".toCharArray(),
      "||---||".toCharArray(),
      " |---||".toCharArray()
    };
{code}â€¨With the main creation loop playing out like so:

{code}    private char[][] expand(int digit, int size) {
  char[][] ret = new char[2 + size][];
  ret[0] = getRow(" " + DIGITS[digit][0] + " " + DIGITS[digit][1] + " ", size);
  char[] midRow = getRow(DIGITS[digit][2] + " " + DIGITS[digit][3] + " " + DIGITS[digit][4], size);
  for (int i = 1; i < ret.length - 1; i++) {
      ret[i] = midRow;
  }
  ret[ret.length - 1] = getRow(" " + DIGITS[digit][5] + " " + DIGITS[digit][6] + " ", size);
  return ret;
    }
{code}
----
Case wrote a program that writes programs.  Namely he wrote a python program that writes a brainf\**k program.  It uses a genetic algorithm and is actually kinda creepy.  In case you haven't seen a brainf*\*k program, it looks like this:

{code},--------------><<>---.><.+-...<<><+++++++++++>,>.<----<+>><-.-+.-+>...<..>>>>++<,<<..<----->>,,>>+++><+++<<<><+-.<-------->..
->-+.>-->++.>+<<---<<+...,++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.->....<+.<...>>.<.-<.>>
<<><><>+.<..>+-.,++++++++++.<.<>..++++++++++++++++++++++++++++++++++++++++++++++++++++++><++++++++++++++++++++++++++++++++++++>
<++.<++++++++++++++++++++....>><.+<.<>...>-+-.<.-><>.<+.+-.+>.>+-.<>>......+++++++++++++..-------------<>..<>-+.+++++++>-><<++++++
..-------------.<>-+.<<>>.>..+++++<.<.>..+>+++++++++<-<>.<<.><<-.>.>>.....-+>+<..>++++++++++++++>
<++++++++++++++++++++++++++++++++++++++++++++++++++.<....>-><+.>.++++++++++++++++++++++...<.>.<.>+-+<<...>>-..<<.<>><.>.<+-.<>
..>>+>++><+++<-.<.>>+<>+++.><<...<>.<>..++++++><+++++++..--->><<----------..<><>.++>><<+++++++++++..-------------.<>.-+....,>.
{code}Now you know why they call it brainf**k.  Yet it's still not as ugly as Sheldon's...
----
James also went with Java, deciding to go with a list of which numbers contain a given segment:

{code:java} private static Integer[] segment1 = new Integer[]{0,2,3,5,6,7,8,9};
  private static Integer[] segment2= new Integer[]{0,4,5,6,8,9};
  private static Integer[] segment3 = new Integer[]{0,1,2,3,4,7,8,9};
  private static Integer[] segment4 = new Integer[]{2,3,4,5,6,8,9};
  private static Integer[] segment5 = new Integer[]{0,2,6,8};
  private static Integer[] segment6 = new Integer[]{0,1,3,4,5,6,7,8,9};
  private static Integer[] segment7 = new Integer[]{0,2,3,5,6,8};
{code}It then goes number by number and segment by segment to do the render.
----
Lloyd came through just a tad late with a fascinating entry in Haskell.  I have no idea how it works yet, but it does.  Feast your eyes on my favorite display method:

{code}display n s = putStr $ showNum sval
    where ds = reverse $ intToDigits n
          val = map (\x -> digits !! x) ds
          sval = map (scale s) val
{code}Outstanding, sir\!
----
Voting is now closed for this competition, final results are posted below\!

You can download all the solutions [here|^ProgrammingChallenge200903.zip] if you'd like to check them out, and you should just for fun.

This was a great turnout for the first month, hopefully the next one is even better\!
----
